k$significat[k$Y < 0.01] = "somewhat significant"
k$significat[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significat))
d + scale_size_manual(values = c(1,3,5))
k = data.frame(sort(runif(200)),sort(rexp(200,100)))
colnames(k) = c("X","Y")
k$significat = rep("not significant",dim(k)[1])
k$significat[k$Y < 0.01] = "somewhat significant"
k$significat[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significat))
d + scale_size_manual(values = c(1,3,5))
rexp(200,100))
rexp(200,100)
k = data.frame(sort(runif(200)),sort(rexp(200,200)))
colnames(k) = c("X","Y")
k$significat = rep("not significant",dim(k)[1])
k$significat[k$Y < 0.01] = "somewhat significant"
k$significat[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significat))
d + scale_size_manual(values = c(1,3,5))
k = data.frame(sort(runif(200)),sort(rexp(200,300)))
colnames(k) = c("X","Y")
k$significat = rep("not significant",dim(k)[1])
k$significat[k$Y < 0.01] = "somewhat significant"
k$significat[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significat))
d + scale_size_manual(values = c(1,3,5))
k = data.frame(sort(runif(200)),sort(rexp(200,300)))
colnames(k) = c("X","Y")
k$significat = rep("not significant",dim(k)[1])
k$significat[k$Y < 0.01] = "somewhat significant"
k$significat[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significat))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(rexp(200,300)))
colnames(k) = c("X","Y")
k$significat = rep("not significant",dim(k)[1])
k$significat[k$Y < 0.01] = "somewhat significant"
k$significat[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significat, shape = significant))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(rexp(200,300)))
colnames(k) = c("X","Y")
k$significat = rep("not significant",dim(k)[1])
k$significat[k$Y < 0.01] = "somewhat significant"
k$significat[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significat, shape = significant))
d + scale_size_manual(values = c(1,2,3))
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significat, shape = significant))
k = data.frame(sort(runif(200)),sort(rexp(200,300)))
colnames(k) = c("X","Y")
k$significat = rep("not significant",dim(k)[1])
k$significat[k$Y < 0.01] = "somewhat significant"
k$significat[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significat, shape = significant))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(rexp(200,300)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant, shape = significant))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(rexp(200,300)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant, shape = significant, color = significant))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(rexp(200,300)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant, shape = significant, color = significant))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(rexp(200,500)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant, shape = significant, color = significant))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(rexp(200,200)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant, shape = significant, color = significant))
d + scale_size_manual(values = c(1,2,3))
?rnorm
dbeta()
dbeta(8)
dbeta(8,shape1 = 2)
dbeta(8,shape1 = 2,4)
k = data.frame(sort(runif(200)),sort(runif(200,-0.0001,1)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant, shape = significant, color = significant))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(runif(200,-0.0001,.1)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant, shape = significant, color = significant))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(runif(200,-0.0001,.1)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant, shape = significant, color = significant))
d + scale_size_manual(values = c(1,2,3))
k = data.frame(sort(runif(200)),sort(runif(200,-0.1,.1)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant, shape = significant, color = significant))
d + scale_size_manual(values = c(1,2,3))
library(ggplot2)
k = data.frame(sort(runif(200)),sort(runif(200,-0.1,.1)))
colnames(k) = c("X","Y")
k$significant = rep("not significant",dim(k)[1])
k$significant[k$Y < 0.01] = "somewhat significant"
k$significant[k$Y < 0.00001] = "very significant"
d = ggplot(k) + geom_point(aes(x=X , y=Y, size = significant))
d + scale_size_manual(values = c(1,2,3))
head(k)
library(lineprof)
install.packages("lineprof")
devtools::install_github("hadley/lineprof")
install.packages("devtools")
devtools::install_github("hadley/lineprof")
library(lineprof)
f <- function() {
pause(0.1)
g()
h()
}
g <- function() {
pause(0.1)
h()
}
h <- function() {
pause(0.1)
}
l <- lineprof(f())
l
shine(l)
shine(l)
?wilcox.test
x = 10
330.99*exp(1)
330.99*exp(1)^(0.1936*x)
330.99*exp(1)^(0.1936*11)
330.99*exp(1)^(0.1936*9)
374.95*exp(1)^(0.2058*9)
374.95*exp(1)^(0.2058*10)
0.2843* x^5 - 5.8766* x^4 + 38.375* x^3 - 57.322 * x^2 - 27.608 * x + 501.42
x
x = 9
0.2843* x^5 - 5.8766* x^4 + 38.375* x^3 - 57.322 * x^2 - 27.608 * x + 501.42
var(c(1,2,1,1))
sqrt(var(c(1,2,1,1)))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(tidyr)
iinstall.packages("ggplot2")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("argparse"))
install.packages("argparse")
devtools::install_github("trevorld/argparse")
install.packages("devtools")
install.packages("devtools")
library(argparse)
install.packages(argparse)
install.packages("argparse")
all_trans_estimates = c(103.5,22.4,43.5,10002.0,43.0,200.0)
all_truth_estimates = c(103.7,12.4,43.5,10003.0,0.0,0.0)
plot(all_truth_estimates,all_trans_estimates)
cor(all_truth_estimates,all_trans_estimates)
fit <- lm(all_truth_estimates ~ all_trans_estimates)
fit
summary(fit)
k = summary(fit)
k$r.squared
all_trans_estimates = c(103.5,22.4,43.5,102.0,43.0,200.0)
all_truth_estimates = c(103.7,12.4,43.5,103.0,0.0,0.0)
plot(all_truth_estimates,all_trans_estimates)
cor(all_truth_estimates,all_trans_estimates)
fit <- lm(all_truth_estimates ~ all_trans_estimates)
fit
k = summary(fit)
k$r.squared
all_trans_estimates = c(103.5,22.4,43.5,102.0,43.0,200.0)
all_truth_estimates = c(103.7,12.4,43.5,103.0,19.0,150.0)
plot(all_truth_estimates,all_trans_estimates)
cor(all_truth_estimates,all_trans_estimates)
fit <- lm(all_truth_estimates ~ all_trans_estimates)
fit
k = summary(fit)
k$r.squared
(k$r.squared)^2
(k$adj.r.squared)^2
k = summary(fit, correlation = TRUE)
k$r.squared
k = summary(fit, correlation = TRUE, method="pearson")
k$r.squared
(k$r.squared)^2
library(Hmisc)
rcorr(all_truth_estimates,all_trans_estimates, type="pearson")
RMSE <- sqrt(mean((all_trans_estimates-all_truth_estimates)^2))
RMSE
scaled_error
scaled_error <- function(estimate, truth) {
2 *(estimate - truth)  / (estimate + truth)
}
all_trans_estimates = c(103.5,22.4,43.5,102.0,43.0,200.0)
all_truth_estimates = c(103.7,12.4,43.5,103.0,19.0,150.0)
med_scaled_err = median(abs(scaled_error(all_trans_estimates, all_truth_estimates))
)
med_scaled_err
abs(scaled_error(all_trans_estimates, all_truth_estimates))
mean(abs(scaled_error(all_trans_estimates, all_truth_estimates)))
library(ggplot2)
library(tidyr)
setwd("~/github/aligner_benchmark/rscripts")
#plot_100_plot <- function(data,ylabs,titles,file) {
#  ggplot(data, aes(x=algorithm, y=value, fill=measurement, order = as.numeric(measurement))) +
#    geom_bar(stat="identity",width= .9) +
#    theme_gray(base_size=10) +#theme_light()+
#    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5)) +
#    ylab(ylabs) +  ggtitle(titles) +
#    #scale_x_discrete(limits=data[order(data[data$measurement == "aligned correctly",]$mean,decreasing = TRUE),]$algorithm) +
#    scale_fill_manual(values=cbPalette)
#  ggsave(
#    file,
#    width = 6.25,
#    height = 5.25,
#    dpi = 300
#  )
#}
plot_100_plot <- function(data,ylabs,titles,file) {
ggplot(data, aes(x=tuned, y=value, fill=measurement, order = as.numeric(measurement))) +
geom_bar(stat="identity",width= .9) +
theme_gray(base_size=10) +#theme_light()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),strip.text.x = element_text( angle = 90)) +
facet_grid(. ~ algorithm) +
ylab(ylabs) +  ggtitle(titles) + xlab("") +
#scale_x_discrete(limits=data[order(data[data$measurement == "aligned correctly",]$mean,decreasing = TRUE),]$algorithm) +
scale_fill_manual(values=cbPalette)
ggsave(
file,
width = 6.25,
height = 5.25,
dpi = 300
)
}
# READ_LEVEL
cols <- c('character','character','character','character','character','character','numeric','character','character')
#d = read.csv("/Users/kat//Google Drive/AlignerBenchmarkLocal/summary/summary_for_R_default.txt", head =T,sep = "\t", colClasses = cols)
d = read.csv("/Users/hayer//Google Drive/AlignerBenchmarkLocal/tweaked_vs_default/read_level_r_in.txt", head =T,sep = "\t", colClasses = cols)
d$tuned = sub("true", "tuned", d$tuned)
d$tuned = sub("false", "default", d$tuned)
d$algorithm = sub(" tuned", "", d$algorithm)
# Plot the 100 plots
d$measurement[d$measurement == "aligned_correctly"] = "aligned correctly"
d$measurement[d$measurement == "aligned_ambiguously"] = "aligned ambiguously"
d$measurement[d$measurement == "aligned_incorrectly"] = "aligned incorrectly"
l  = spread(d[,c("level","algorithm","tuned",
"measurement","value")], measurement, value)
l$"aligned correctly" = 1-l$"aligned ambiguously"-l$unaligned-l$"aligned incorrectly"
gat = gather(l,measurement,value, -level, -algorithm,-tuned)
#cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette <- c("#009E73", "#E69F00", "#CE3700", "#C0C0C0", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gat = gat[gat$measurement %in% c("aligned incorrectly","aligned ambiguously","unaligned","aligned correctly") ,]
gat$measurement = factor(gat$measurement, levels = c("aligned correctly","aligned ambiguously","aligned incorrectly","unaligned"))
r = gat[gat$level == "READ",]
plot_100_plot(r,"percent of total reads","Effect of tuning - malaria t3 read level","default_vs_tuned/malaria_t3_READ.pdf")
# BASE_LEVEL
cols <- c('character','character','character','character','character','character','numeric','character','character')
#d = read.csv("/Users/kat//Google Drive/AlignerBenchmarkLocal/summary/summary_for_R_default.txt", head =T,sep = "\t", colClasses = cols)
d = read.csv("/Users/hayer//Google Drive/AlignerBenchmarkLocal/tweaked_vs_default/base_level_r_in.txt", head =T,sep = "\t", colClasses = cols)
d$tuned = sub("true", "tuned", d$tuned)
d$tuned = sub("false", "default", d$tuned)
d$algorithm = sub(" tuned", "", d$algorithm)
# Plot the 100 plots
d$measurement[d$measurement == "aligned_correctly"] = "aligned correctly"
d$measurement[d$measurement == "aligned_ambiguously"] = "aligned ambiguously"
d$measurement[d$measurement == "aligned_incorrectly"] = "aligned incorrectly"
l  = spread(d[,c("level","algorithm","tuned",
"measurement","value")], measurement, value)
l$"aligned correctly" = 1-l$"aligned ambiguously"-l$unaligned-l$"aligned incorrectly"
gat = gather(l,measurement,value, -level, -algorithm,-tuned)
#cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette <- c("#009E73", "#E69F00", "#CE3700", "#C0C0C0", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gat = gat[gat$measurement %in% c("aligned incorrectly","aligned ambiguously","unaligned","aligned correctly") ,]
gat$measurement = factor(gat$measurement, levels = c("aligned correctly","aligned ambiguously","aligned incorrectly","unaligned"))
r = gat[gat$level == "BASE",]
plot_100_plot(r,"percent of total bases","Effect of tuning - malaria t3 base level","default_vs_tuned/malaria_t3_BASE.pdf")
cols <- c('character','character','character','character','character','character','numeric','character','character')
#d = read.csv("/Users/kat//Google Drive/AlignerBenchmarkLocal/summary/summary_for_R_default.txt", head =T,sep = "\t", colClasses = cols)
d = read.csv("/Users/hayer//Google Drive/AlignerBenchmarkLocal/tweaked_vs_default/junc_level_r_in.txt", head =T,sep = "\t", colClasses = cols)
l  = spread(d[,c("level","algorithm","tuned",
"measurement","value")], measurement, value)
head(l)
l$recall[l$recall == 1] = NA
l$precision[l$precision == 1] = NA
gat = gather(l,measurement,value,-level, -algorithm, -annotation, -species, -dataset, -tuned)
#cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00",
gat = gather(l,measurement,value,-level, -algorithm, -species, -dataset, -tuned)
gat = gather(l,measurement,value,-level, -algorithm, -dataset, -tuned)
gat = gather(l,measurement,value,-level, -algorithm, -tuned)
head(gat)
gat = gat[gat$measurement %in% c("recall","precision") ,]
r = gat[ gat$level == "JUNC" & gat$species == "malaria" & gat$dataset == "t3",]
plot_recall(r,"","Effect of tuning - malaria t3 junction level","default_vs_tuned/malaria_t3_JUNC.pdf")
plot_recall <- function(data,ylabs,titles,file) {
ggplot(data, aes(x=annotation, y=value, fill=measurement)) +
geom_bar(stat="identity",position="dodge",width= .85) +
theme_gray(base_size=10) +#theme_light()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),strip.text.x = element_text( angle = 90)) +
facet_grid(. ~ algorithm) +
#scale_y_continuous(limits=c(0.0,1),oob = rescale_none) +
ylab(ylabs) +  ggtitle(titles) + xlab("") +
#scale_x_discrete(limits=data[order(data[data$measurement == "aligned correctly",]$value,decreasing = TRUE),]$algorithm) +
scale_fill_manual(values=cbPalette)
ggsave(
file,
width = 7.75,
height = 5.25,
dpi = 300
)
}
plot_recall(r,"","Effect of tuning - malaria t3 junction level","default_vs_tuned/malaria_t3_JUNC.pdf")
plot_recall <- function(data,ylabs,titles,file) {
ggplot(data, aes(x=tuned, y=value, fill=measurement)) +
geom_bar(stat="identity",position="dodge",width= .85) +
theme_gray(base_size=10) +#theme_light()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),strip.text.x = element_text( angle = 90)) +
facet_grid(. ~ algorithm) +
#scale_y_continuous(limits=c(0.0,1),oob = rescale_none) +
ylab(ylabs) +  ggtitle(titles) + xlab("") +
#scale_x_discrete(limits=data[order(data[data$measurement == "aligned correctly",]$value,decreasing = TRUE),]$algorithm) +
scale_fill_manual(values=cbPalette)
ggsave(
file,
width = 7.75,
height = 5.25,
dpi = 300
)
}
plot_recall(r,"","Effect of tuning - malaria t3 junction level","default_vs_tuned/malaria_t3_JUNC.pdf")
head(r)
r = gat[ gat$level == "JUNC" ,]
plot_recall(r,"","Effect of tuning - malaria t3 junction level","default_vs_tuned/malaria_t3_JUNC.pdf")
cols <- c('character','character','character','character','character','character','numeric','character','character')
#d = read.csv("/Users/kat//Google Drive/AlignerBenchmarkLocal/summary/summary_for_R_default.txt", head =T,sep = "\t", colClasses = cols)
d = read.csv("/Users/hayer//Google Drive/AlignerBenchmarkLocal/tweaked_vs_default/junc_level_r_in.txt", head =T,sep = "\t", colClasses = cols)
#d$tuned = sub("true", "tuned", d$tuned)
#d$tuned = sub("false", "default", d$tuned)
#d$algorithm = sub(" tuned", "", d$algorithm)
head(d)
d
d=d[d$level == "JUNC"]
d=d[d$level == "JUNC",]
head(d)
cols <- c('character','character','character','character','character','character','numeric','character','character')
#d = read.csv("/Users/kat//Google Drive/AlignerBenchmarkLocal/summary/summary_for_R_default.txt", head =T,sep = "\t", colClasses = cols)
d = read.csv("/Users/hayer//Google Drive/AlignerBenchmarkLocal/tweaked_vs_default/junc_level_r_in.txt", head =T,sep = "\t", colClasses = cols)
#d$tuned = sub("true", "tuned", d$tuned)
#d$tuned = sub("false", "default", d$tuned)
#d$algorithm = sub(" tuned", "", d$algorithm)
# Plot the 100 plots
#d$measurement[d$measurement == "aligned_correctly"] = "aligned correctly"
#d$measurement[d$measurement == "aligned_ambiguously"] = "aligned ambiguously"
#d$measurement[d$measurement == "aligned_incorrectly"] = "aligned incorrectly"
d=d[d$level == "JUNC",]
head(d)
l  = spread(d[,c("level","algorithm","tuned",
"measurement","value")], measurement, value)
plot_recall <- function(data,ylabs,titles,file) {
ggplot(data, aes(x=tuned, y=value, fill=measurement)) +
geom_bar(stat="identity",position="dodge",width= .85) +
theme_gray(base_size=10) +#theme_light()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),strip.text.x = element_text( angle = 90)) +
facet_grid(. ~ algorithm) +
#scale_y_continuous(limits=c(0.0,1),oob = rescale_none) +
ylab(ylabs) +  ggtitle(titles) + xlab("") +
#scale_x_discrete(limits=data[order(data[data$measurement == "aligned correctly",]$value,decreasing = TRUE),]$algorithm) +
scale_fill_manual(values=cbPalette)
ggsave(
file,
width = 7.75,
height = 5.25,
dpi = 300
)
}
l$recall[l$recall == 1] = NA
l$precision[l$precision == 1] = NA
gat = gather(l,measurement,value,-level, -algorithm, -tuned)
#cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gat = gat[gat$measurement %in% c("recall","precision") ,]
r = gat[ gat$level == "JUNC" ,]
plot_recall(r,"","Effect of tuning - malaria t3 junction level","default_vs_tuned/malaria_t3_JUNC.pdf")
tail(l)
cols <- c('character','character','character','character','character','character','numeric','character','character')
#d = read.csv("/Users/kat//Google Drive/AlignerBenchmarkLocal/summary/summary_for_R_default.txt", head =T,sep = "\t", colClasses = cols)
d = read.csv("/Users/hayer//Google Drive/AlignerBenchmarkLocal/tweaked_vs_default/junc_level_r_in.txt", head =T,sep = "\t", colClasses = cols)
#d$tuned = sub("true", "tuned", d$tuned)
#d$tuned = sub("false", "default", d$tuned)
#d$algorithm = sub(" tuned", "", d$algorithm)
# Plot the 100 plots
#d$measurement[d$measurement == "aligned_correctly"] = "aligned correctly"
#d$measurement[d$measurement == "aligned_ambiguously"] = "aligned ambiguously"
#d$measurement[d$measurement == "aligned_incorrectly"] = "aligned incorrectly"
d=d[d$level == "JUNC",]
head(d)
d[d$algorithm == "clc"]
d[d$algorithm == "clc",]
d = d[!duplicated(d), ]
d[d$algorithm == "clc",]
l  = spread(d[,c("level","algorithm","tuned",
"measurement","value")], measurement, value)
plot_recall <- function(data,ylabs,titles,file) {
ggplot(data, aes(x=tuned, y=value, fill=measurement)) +
geom_bar(stat="identity",position="dodge",width= .85) +
theme_gray(base_size=10) +#theme_light()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),strip.text.x = element_text( angle = 90)) +
facet_grid(. ~ algorithm) +
#scale_y_continuous(limits=c(0.0,1),oob = rescale_none) +
ylab(ylabs) +  ggtitle(titles) + xlab("") +
#scale_x_discrete(limits=data[order(data[data$measurement == "aligned correctly",]$value,decreasing = TRUE),]$algorithm) +
scale_fill_manual(values=cbPalette)
ggsave(
file,
width = 7.75,
height = 5.25,
dpi = 300
)
}
l$recall[l$recall == 1] = NA
l$precision[l$precision == 1] = NA
gat = gather(l,measurement,value,-level, -algorithm, -tuned)
#cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gat = gat[gat$measurement %in% c("recall","precision") ,]
r = gat[ gat$level == "JUNC" ,]
plot_recall(r,"","Effect of tuning - malaria t3 junction level","default_vs_tuned/malaria_t3_JUNC.pdf")
cols <- c('character','character','character','character','character','character','numeric','character','character')
#d = read.csv("/Users/kat//Google Drive/AlignerBenchmarkLocal/summary/summary_for_R_default.txt", head =T,sep = "\t", colClasses = cols)
d = read.csv("/Users/hayer//Google Drive/AlignerBenchmarkLocal/tweaked_vs_default/junc_level_r_in.txt", head =T,sep = "\t", colClasses = cols)
d$tuned = sub("FNR tuned", "Recall tuned", d$tuned)
d$tuned = sub("FDR tuned", "Precision tuned", d$tuned)
#d$algorithm = sub(" tuned", "", d$algorithm)
# Plot the 100 plots
#d$measurement[d$measurement == "aligned_correctly"] = "aligned correctly"
#d$measurement[d$measurement == "aligned_ambiguously"] = "aligned ambiguously"
#d$measurement[d$measurement == "aligned_incorrectly"] = "aligned incorrectly"
d=d[d$level == "JUNC",]
d = d[!duplicated(d), ]
l  = spread(d[,c("level","algorithm","tuned",
"measurement","value")], measurement, value)
plot_recall <- function(data,ylabs,titles,file) {
ggplot(data, aes(x=tuned, y=value, fill=measurement)) +
geom_bar(stat="identity",position="dodge",width= .85) +
theme_gray(base_size=10) +#theme_light()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),strip.text.x = element_text( angle = 90)) +
facet_grid(. ~ algorithm) +
#scale_y_continuous(limits=c(0.0,1),oob = rescale_none) +
ylab(ylabs) +  ggtitle(titles) + xlab("") +
#scale_x_discrete(limits=data[order(data[data$measurement == "aligned correctly",]$value,decreasing = TRUE),]$algorithm) +
scale_fill_manual(values=cbPalette)
ggsave(
file,
width = 7.75,
height = 5.25,
dpi = 300
)
}
l$recall[l$recall == 1] = NA
l$precision[l$precision == 1] = NA
gat = gather(l,measurement,value,-level, -algorithm, -tuned)
#cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gat = gat[gat$measurement %in% c("recall","precision") ,]
r = gat[ gat$level == "JUNC" ,]
plot_recall(r,"","Effect of tuning - malaria t3 junction level","default_vs_tuned/malaria_t3_JUNC.pdf")
cols <- c('character','character','character','character','character','character','numeric','character','character')
#d = read.csv("/Users/kat//Google Drive/AlignerBenchmarkLocal/summary/summary_for_R_default.txt", head =T,sep = "\t", colClasses = cols)
d = read.csv("/Users/hayer//Google Drive/AlignerBenchmarkLocal/tweaked_vs_default/human_t3r1_base_level_r_in.txt", head =T,sep = "\t", colClasses = cols)
d$tuned = sub("true", "tuned", d$tuned)
d$tuned = sub("false", "default", d$tuned)
d$algorithm = sub(" tuned", "", d$algorithm)
# Plot the 100 plots
d$measurement[d$measurement == "aligned_correctly"] = "aligned correctly"
d$measurement[d$measurement == "aligned_ambiguously"] = "aligned ambiguously"
d$measurement[d$measurement == "aligned_incorrectly"] = "aligned incorrectly"
l  = spread(d[,c("level","algorithm","tuned",
"measurement","value")], measurement, value)
l$recall[l$recall == 1] = NA
l$precision[l$precision == 1] = NA
gat = gather(l,measurement,value,-level, -algorithm, -tuned)
#cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gat = gat[gat$measurement %in% c("recall","precision") ,]
r = gat[ gat$level == "JUNC" ,]
plot_recall(r,"","Effect of tuning - human t3 junction level","default_vs_tuned/human_t3_JUNC.pdf")
